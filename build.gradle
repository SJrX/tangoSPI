/**
 * Used to assist with functional tests of plugin (but also may auto-generate stuff)
 *
 * Source: https://docs.gradle.org/3.3/userguide/javaGradle_plugin.html
 */
plugins {
    id "java-gradle-plugin"
    id "jacoco"
}

gradlePlugin {
    plugins {
        tangoSpi {
            id = "net.sjrx.tangospi"
            implementationClass = "net.sjrx.gradle.plugins.tango.TangoSPIPlugin"
        }
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'codenarc'

/**
 * Controls maven publication information
 *
 * Source: (TBD)
 */
archivesBaseName = 'tangospi-plugin'
group 'net.sjrx.gradle.plugins'
version '0.1-SNAPSHOT'

sourceCompatibility = 1.7


repositories {
    mavenCentral()
}

sourceSets {
    functionalTests {
        groovy {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }

    }
}

configurations {
    functionalTestsCompile.extendsFrom testCompile
    functionalTestsRuntime.extendsFrom testRuntime

    all {
        resolutionStrategy {
            force 'org.codehaus.groovy:groovy-all:2.4.7'
        }
    }
}

dependencies {
    // TODO figure out why localGroovy() tanks
    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    compile gradleApi()

    compile 'org.ow2.asm:asm-all:5.2' // Plugin used for byte code analysis
    compile 'net.jcip:jcip-annotations:1.0' // Annotations for documentation only

    testCompile 'junit:junit:4.12'
    functionalTestsCompile 'junit:junit:4.12'
    functionalTestsCompile gradleTestKit() // Used for functional test fixture creation

    functionalTestsCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTests.output.classesDir
    classpath = sourceSets.functionalTests.runtimeClasspath
}

jacoco {
    toolVersion = "0.7.9"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task functionalTestCoverageReport(type: JacocoReport) {
    sourceSets sourceSets.main
    executionData functionalTest
}

/**
 * Code Narc settings
 */
project.ext.maxViolations = 1000 // TODO lower this number after we are past MVP.
codenarcMain {
    configFile file("$rootDir/config/codenarc/codenarc.groovy")

    maxPriority1Violations maxViolations
    maxPriority2Violations maxViolations
    maxPriority3Violations maxViolations
}

codenarcTest {
    configFile file("$rootDir/config/codenarc/codenarc.groovy")

    maxPriority1Violations maxViolations
    maxPriority2Violations maxViolations
    maxPriority3Violations maxViolations
}

codenarcFunctionalTests {
    configFile file("$rootDir/config/codenarc/codenarc.groovy")

    maxPriority1Violations maxViolations
    maxPriority2Violations maxViolations
    maxPriority3Violations maxViolations
}

test.dependsOn functionalTest
check.dependsOn functionalTestCoverageReport